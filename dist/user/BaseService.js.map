{"version":3,"sources":["user/BaseService.ts"],"names":[],"mappings":";;;;;;AAAA,4BAAwB,gBAAgB,CAAC,CAAA;AACzC,IAAY,CAAC,WAAM,GAAG,CAAC,CAAA;AAEvB;IAAsB,2BAAW;IAG/B,iBAAmB,UAAU;QAC3B,iBAAO,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC;IACzB,CAAC;IAES,+BAAa,GAAvB,UAAwB,KAAa;QACnC,IAAI,QAAQ,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;QACzB,IAAI,WAAW,GAAG,6CAA6C,CAAC;QAEhE,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;QAC9C,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC;QAED,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;IAC1B,CAAC;IACH,cAAC;AAAD,CApBA,AAoBC,CApBqB,qBAAW,GAoBhC;AAED;kBAAe,OAAO,CAAC","file":"user/BaseService.js","sourcesContent":["import BaseService from '../BaseService';\nimport * as q from 'q';\n\nclass Service extends BaseService {\n  protected repo;\n\n  public constructor(repository) {\n    super();\n    this.repo = repository;\n  }\n\n  protected validateEmail(email: string) {\n    var deferred = q.defer();\n    var email_regex = /^[A-Z0-9.\\'_%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\n\n    if (!email_regex.test(email)) {\n      deferred.reject(new Error('Invalid email'));\n    } else {\n      deferred.resolve(true);\n    }\n\n    return deferred.promise;\n  }\n}\n\nexport default Service;"],"sourceRoot":"/source/"}