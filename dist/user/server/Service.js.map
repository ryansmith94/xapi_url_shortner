{"version":3,"sources":["user/server/Service.ts"],"names":[],"mappings":"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","file":"user/server/Service.js","sourcesContent":["import BaseService from '../BaseService';\nimport * as q from 'q';\nimport * as passhash from 'password-hash';\n\nclass Service extends BaseService {\n  private group_service;\n\n  public setGroupService(group_service) {\n    this.group_service = group_service;\n  }\n\n  private validateGroupId(group_id) {\n    return this.group_service.getGroupById(group_id).then(function (group) {\n      return group;\n    }.bind(this), function (err) {\n      throw new Error('Group does not exist.');\n    });\n  }\n\n  private validateCreateUser(email: string, password: string, group_id) {\n    return this.validateEmail(email).then(() => {\n      return this.validateGroupId(group_id);\n    }).then((group) => {\n      return this.getUserByEmail(email).then((user) => {\n        if (user.group_id == group_id) {\n          throw new Error('Email already exists in the group.');\n        } else {\n          throw new Error('Email already exists in another group.');\n        }\n      }, (err) => {\n        return true;\n      });\n    });\n  }\n\n  private validateUser(email: string, group_id) {\n    return this.validateEmail(email).then(function () {\n      return this.validateGroupId(group_id);\n    }.bind(this));\n  }\n\n  public createUser(email: string, password: string, group_id) {\n    return this.validateCreateUser(email, password, group_id).then(function () {\n      return this.repo.createUser({\n        email: email,\n        password: passhash.generate(password),\n        group_id: group_id,\n        admin: false\n      });\n    }.bind(this));\n  }\n\n  public createUserWithUser(email: string, password: string, user_id: number) {\n    return this.getUserById(user_id).then((user) => {\n      return this.createUser(email, password, user.group_id);\n    });\n  }\n\n  public deleteUserById(id) {\n    return this.repo.deleteUserById(id);\n  }\n\n  public getUserByEmailAndPassword(email: string, password: string) {\n    return this.getUserByEmail(email).then(function (user) {\n      if (passhash.verify(password, user.password)) {\n        return user;\n      } else {\n        throw new Error('No User with those credentials');\n      }\n    });\n  }\n\n  public getUserById(id) {\n    return this.repo.getUserById(id);\n  }\n\n  public getUsersByGroupId(group_id) {\n    return this.validateGroupId(group_id).then(function () {\n      return this.repo.getUsersByGroupId(group_id);\n    }.bind(this));\n  }\n\n  public deleteUsersByGroupId(group_id) {\n    return this.validateGroupId(group_id).then(function() {\n      return this.repo.deleteUsersByGroupId(group_id);\n    }.bind(this)).then(function () {\n      return true;\n    }); \n  }\n\n  private getUserByEmail(email: string) {\n    return this.repo.getUserByEmail(email);\n  }\n\n  public createAdmin(id) {\n    return this.getUserById(id).then((user) => {\n      user.admin = true;\n      return this.repo.updateUserById(id, user);\n    });\n  }\n}\n\nexport default Service;"],"sourceRoot":"/source/"}