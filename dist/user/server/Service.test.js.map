{"version":3,"sources":["user/server/Service.test.ts"],"names":[],"mappings":"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","file":"user/server/Service.test.js","sourcesContent":["import BaseTest from '../../BaseTest';\nimport Factory from './TestFactory';\nimport GroupFactory from '../../group/TestFactory';\nimport * as passhash from 'password-hash';\n\nvar EMAIL = 'test@example.com';\nvar PASSWORD = 'password';\nvar GROUP_NAME = 'Test group';\nvar GROUP_ID = 1;\nclass Test extends BaseTest {\n  protected name: string = __filename;\n  protected service;\n  protected group_service;\n  protected token_service;\n\n  public beforeEach() {\n    // Initialises services.\n    this.group_service = GroupFactory();\n    this.service = Factory();\n\n    // Injects services into services.\n    this.service.setGroupService(this.group_service);\n  }\n\n  private createUser(id = '') {\n    var user_email = id+'test@example.com';\n    var user_pass = 'test_password';\n    var group_name = 'GROUP_NAME';\n    return this.group_service.createGroup(group_name).then((group) => {\n      return this.service.createUser(user_email, user_pass, group.id);\n    });\n  }\n\n  public testCreateUser() {\n    return this.group_service.createGroup(GROUP_NAME).then((group: any) => {\n      return this.service.createUser(EMAIL, PASSWORD, group.id).then((user: any) => {\n        this.assert(user.email === EMAIL);\n        this.assert(passhash.verify(PASSWORD, user.password));\n        this.assert(user.group_id === group.id);\n        this.assert(user.admin === false);\n      });\n    });\n  }\n\n  public testCreateUserWithInvalidEmail() {\n    return this.group_service.createGroup(GROUP_NAME).then((group: any) => {\n      return this.service.createUser('invalid_email', PASSWORD, group.id);\n    }).then(this.fail(), this.pass());\n  }\n\n  public testCreateUserWithInvalidGroupId() {\n    return this.service.createUser(EMAIL, PASSWORD, GROUP_ID).then(this.fail(), this.pass());\n  }\n\n  public testCreateUserThatExistsInGroup() {\n    return this.group_service.createGroup(GROUP_NAME).then((group: any) => {\n      return this.service.createUser(EMAIL, PASSWORD, group.id).then((existing_user) => {\n        return this.service.createUser(EMAIL, PASSWORD, group.id).then(this.fail(), this.pass());\n      });\n    });\n  }\n\n  public testGetUserByEmailAndPassword() {\n    return this.group_service.createGroup(GROUP_NAME).then((group: any) => {\n      return this.service.createUser(EMAIL, PASSWORD, group.id).then((existing_user: any) => {\n        return this.service.getUserByEmailAndPassword(EMAIL, PASSWORD).then((user) => {\n          this.assert(user.id === existing_user.id);\n          this.assert(user.email === EMAIL);\n          this.assert(passhash.verify(PASSWORD, user.password));\n          this.assert(user.admin === false);\n        });\n      });\n    });\n  }\n\n  public testGetUserByEmailAndPasswordWithNoUser() {\n    return this.service.getUserByEmailAndPassword(EMAIL, PASSWORD).then(this.fail(), this.pass());\n  }\n\n  public testGetUserByIdWithNoUser() {\n    return this.service.getUserById(1).then(this.fail(), this.pass());\n  }\n\n  public testDeleteUserById() {\n    var group_id, user_id;\n\n    return this.group_service.createGroup(GROUP_NAME).then((group: any) => {\n      group_id = group.id\n      return this.service.createUser(EMAIL, PASSWORD, group_id);\n    }).then((user) => {\n      user_id = user.id\n      return this.service.deleteUserById(user_id);\n    }).then(() => {\n      return this.service.getUserById(user_id);\n    }).then(this.fail(), this.pass());\n  }\n\n  public testDeleteUserByIdWithNoUser() {\n    return this.service.deleteUserById(1).then(this.fail(), this.pass());\n  }\n\n  public testCreateUserWithUser() {\n    return this.createUser('1').then((user: any) => {\n      return this.service.createUserWithUser(EMAIL, PASSWORD, user.id);\n    }).then((user: any) => {\n      this.assert(user.email === EMAIL);\n      this.assert(passhash.verify(PASSWORD, user.password));\n      this.assert(user.admin === false);\n    });\n  }\n\n  public testCreateUserWithUserAndInvalidEmail() {\n    return this.createUser('1').then((user: any) => {\n      return this.service.createUserWithUser('invalid email', PASSWORD, user.id);\n    }).then(this.fail(), this.pass());\n  }\n\n  public testCreateUserWithUserThatExists() {\n    return this.createUser().then((user: any) => {\n      return this.service.createUserWithUser(EMAIL, PASSWORD, user.id);\n    }).then(this.fail(), this.pass());\n  }\n\n  public testGetUsersWithGroupId() {\n    return this.group_service.createGroup(GROUP_NAME).then((group: any) => {\n      return this.service.createUser(EMAIL, PASSWORD, group.id);\n    }).then((user) => {\n      return this.service.getUsersByGroupId(user.group_id);\n    }).then((users) => {\n      this.assert(Array.isArray(users));\n      this.assert(users.length === 1);\n      this.assert(users[0].email === EMAIL);\n    });\n  }\n\n  public testGetUsersWithInvalidGroupId() {\n    return this.service.getUsersByGroupId(GROUP_ID).then(this.fail(), this.pass());\n  }\n\n  public testDeleteUsersByGroupId() {\n    var group_id, user_id;\n\n    return this.group_service.createGroup(GROUP_NAME).then((group: any) => {\n      group_id = group.id\n      return this.service.createUser(EMAIL, PASSWORD, group_id);\n    }).then((user) => {\n      user_id = user.id\n      return this.service.deleteUsersByGroupId(group_id);\n    }).then(() => {\n      return this.service.getUserById(user_id);\n    }).then(this.fail(), this.pass());\n  }\n\n  public testDeleteUsersByInvalidGroupId() {\n    return this.service.deleteUsersByGroupId(1).then(this.fail(), this.pass());\n  }\n\n  public testCreateAdmin() {\n    return this.createUser().then((user) => {\n      return this.service.createAdmin(user.id);\n    }).then((user) => {\n      this.assert(user.admin === true);\n    });\n  }\n}\n\n(new Test()).run();\nexport default Test;"],"sourceRoot":"/source/"}