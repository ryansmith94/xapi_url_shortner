{"version":3,"sources":["BaseTest.ts"],"names":[],"mappings":";AAAA,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,kBAAkB,WAAM,oBAAoB,CAAC,CAAA;AAEzD,kBAAkB,CAAC,OAAO,CAAC;IACzB,wBAAwB,EAAE,KAAK;CAChC,CAAC,CAAC;AAEH;IAAA;QACY,SAAI,GAAW,UAAU,CAAC;IAgEtC,CAAC;IA3DQ,sBAAG,GAAV;QAAA,iBAaC;QAZC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE;YAClB,IAAI,IAAI,GAAG,EAAE,CAAC;YACd,GAAG,CAAC,CAAC,IAAI,GAAG,IAAI,KAAI,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC;YAED,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG;gBACnC,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC;YAEH,KAAK,CAAC,OAAO,CAAC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAI,CAAC,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC;IAMO,0BAAO,GAAf,UAAgB,IAAY;QAA5B,iBAMC;QALC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QACvC,EAAE,CAAC,IAAI,EAAE,UAAC,IAAI;YACZ,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;QACH,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACvC,CAAC;IAKM,6BAAU,GAAjB,cAAqB,CAAC;IAKf,4BAAS,GAAhB,cAAoB,CAAC;IAOX,yBAAM,GAAhB,UAAiB,SAAkB,EAAE,OAAgB;QACnD,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,IAAI,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACtD,CAAC;IAKS,uBAAI,GAAd;QAAA,iBAEC;QADC,MAAM,CAAC,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAjB,CAAiB,CAAC;IACjC,CAAC;IAKS,uBAAI,GAAd;QAAA,iBAEC;QADC,MAAM,CAAC,cAAM,OAAA,KAAI,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,EAA1B,CAA0B,CAAC;IAC1C,CAAC;IACH,eAAC;AAAD,CAjEA,AAiEC,IAAA;AAED;kBAAe,QAAQ,CAAC","file":"BaseTest.js","sourcesContent":["import * as chai from 'chai';\nimport * as source_map_support from 'source-map-support';\n\nsource_map_support.install({\n  handleUncaughtExceptions: false\n});\n\nabstract class TestCase {\n  protected name: string = __filename;\n\n  /**\n   * Runs the tests.\n   */\n  public run() {\n    describe(this.name, () => {\n      var keys = [];\n      for (var key in this) {\n        keys.push(key);\n      }\n\n      var tests = keys.filter(function (key) {\n        return key.indexOf('test') === 0;\n      });\n\n      tests.forEach(this.runTest.bind(this));\n    });\n  }\n\n  /**\n   * Runs a single test.\n   * @param {string} test Name of the test to run.\n   */\n  private runTest(test: string) {\n    beforeEach(this.beforeEach.bind(this));\n    it(test, (done) => {\n      return this[test]().then(done, done);\n    });\n    afterEach(this.afterEach.bind(this));\n  }\n\n  /**\n   * Defines things to be done before each test.\n   */\n  public beforeEach() {}\n\n  /**\n   * Defines things to be done after each test.\n   */\n  public afterEach() {}\n\n  /**\n   * Asserts that a condition is true.\n   * @param {boolean} condition The condition to assert.\n   * @param {string} message The message to display when the condition is false.\n   */\n  protected assert(condition: boolean, message?: string) {\n    chai.assert.equal(condition == true, true, message);\n  }\n\n  /**\n   * Passes an assertion.\n   */\n  protected pass() {\n    return () => this.assert(true);\n  }\n\n  /**\n   * Fails an assertion.\n   */\n  protected fail() {\n    return () => this.assert(false, 'Fail');\n  }\n}\n\nexport default TestCase;"],"sourceRoot":"/source/"}