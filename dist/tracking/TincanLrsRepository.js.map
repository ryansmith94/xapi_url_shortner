{"version":3,"sources":["tracking/TincanLrsRepository.ts"],"names":[],"mappings":";AAAA,IAAY,MAAM,WAAM,UAAU,CAAC,CAAA;AACnC,IAAY,CAAC,WAAM,GAAG,CAAC,CAAA;AAEvB;IAGE,oBAAmB,MAAM;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEO,4BAAO,GAAf;QACE,MAAM,CAAC,IAAI,MAAM,CAAC,EAAC,YAAY,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAC,CAAC,CAAC;IACnD,CAAC;IAEM,oCAAe,GAAtB,UAAuB,SAAS;QAC9B,IAAI,QAAQ,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;QAEzB,IAAI,CAAC,OAAO,EAAE,CAAC,aAAa,CAAC,SAAS,EAAE,UAAC,SAAS;YAChD,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;gBAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC;YAElE,IAAI,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC,UAAC,QAAQ;gBACtC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;YACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACN,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC;gBAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YAEzD,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;YAC5B,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAC,GAAG;gBACxB,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,GAAG,CAAC,CAAC;YAC3C,CAAC,EAAE,UAAC,GAAG;gBACL,OAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;YAC1D,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;IAC1B,CAAC;IACH,iBAAC;AAAD,CA/BA,AA+BC,IAAA;AAED;kBAAe,UAAU,CAAC","file":"tracking/TincanLrsRepository.js","sourcesContent":["import * as Tincan from 'tincanjs';\nimport * as q from 'q';\n\nclass Repository {\n  private config;\n\n  public constructor(config) {\n    this.config = config;\n  }\n\n  private connect() {\n    return new Tincan({recordStores: [this.config]});\n  }\n\n  public createStatement(statement) {\n    var deferred = q.defer();\n\n    this.connect().sendStatement(statement, (responses) => {\n      if (!responses) deferred.reject(new Error('No LRSs configured.'));\n\n      var err_res = responses.filter((response) => {\n        return response.err;\n      })[0];\n      if (err_res && err_res.err) deferred.reject(err_res.err);\n\n      deferred.resolve(statement);\n      deferred.promise.then((arg) => {\n        console.log('SUCCESSFUL STATEMENT', arg);\n      }, (arg) => {\n        console.log('ERROR STATEMENT', JSON.stringify(err_res));\n      });\n    });\n    return deferred.promise;\n  }\n}\n\nexport default Repository;\n"],"sourceRoot":"/source/"}