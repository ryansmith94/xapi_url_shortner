{"version":3,"sources":["group/TestRepository.ts"],"names":[],"mappings":";AAAA,IAAY,CAAC,WAAM,GAAG,CAAC,CAAA;AAEvB;IAAA;QACU,WAAM,GAAe,EAAE,CAAC;IA0ClC,CAAC;IAxCQ,gCAAW,GAAlB,UAAmB,KAAK;QACtB,KAAK,CAAC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IAClB,CAAC;IAEM,iCAAY,GAAnB,UAAoB,EAAE;QACpB,IAAI,QAAQ,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;QAEzB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACxB,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;QACxC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;QACzC,CAAC;QAED,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;IAC1B,CAAC;IAEM,8BAAS,GAAhB;QACE,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACxB,CAAC;IAEM,oCAAe,GAAtB,UAAuB,EAAE;QACvB,IAAI,QAAQ,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC;QACzB,IAAI,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,KAAK,EAAE,KAAK;YAC7D,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;YACpB,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAC/B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CACjE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAChD,CAAC;YACF,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACzB,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;QACzC,CAAC;QAED,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;IAC1B,CAAC;IACH,iBAAC;AAAD,CA3CA,AA2CC,IAAA;AAED;kBAAe,UAAU,CAAC","file":"group/TestRepository.js","sourcesContent":["import * as q from 'q';\n\nclass Repository {\n  private groups: Array<any> = [];\n\n  public createGroup(group) {\n    group.id = this.groups.length + 1;\n    this.groups.push(group);\n    return q(group);\n  }\n\n  public getGroupById(id) {\n    var deferred = q.defer();\n    \n    if (this.groups[id - 1]) {\n      deferred.resolve(this.groups[id - 1]);\n    } else {\n      deferred.reject(new Error('No group'));\n    }\n\n    return deferred.promise;\n  }\n\n  public getGroups() {\n    return q(this.groups);\n  }\n\n  public deleteGroupById(id) {\n    var deferred = q.defer();\n    var filtered_groups = this.groups.filter(function (group, index) {\n      group.index = index;\n      return group.id === id;\n    });\n\n    if (filtered_groups.length > 0) {\n      this.groups = this.groups.slice(0, filtered_groups[0].index).concat(\n        this.groups.slice(filtered_groups[0].index + 1)\n      );\n      deferred.resolve(true);\n    } else {\n      deferred.reject(new Error('No group'));\n    }\n\n    return deferred.promise;\n  }\n}\n\nexport default Repository;"],"sourceRoot":"/source/"}