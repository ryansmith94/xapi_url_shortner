{"version":3,"sources":["group/Service.test.ts"],"names":[],"mappings":";;;;;;AAAA,yBAAqB,aAAa,CAAC,CAAA;AACnC,4BAAoB,eAAe,CAAC,CAAA;AACpC,4BAAwB,4BAA4B,CAAC,CAAA;AACrD,4BAAwB,4BAA4B,CAAC,CAAA;AACrD,IAAY,CAAC,WAAM,GAAG,CAAC,CAAA;AAEvB,IAAI,IAAI,GAAG,SAAS,CAAA;AACpB;IAAmB,wBAAQ;IAA3B;QAAmB,8BAAQ;QACf,SAAI,GAAW,UAAU,CAAC;IA8FtC,CAAC;IAzFQ,yBAAU,GAAjB;QACE,IAAI,CAAC,OAAO,GAAG,qBAAO,EAAE,CAAC;QACzB,IAAI,CAAC,YAAY,GAAG,qBAAW,EAAE,CAAC;QAClC,IAAI,CAAC,YAAY,GAAG,qBAAW,EAAE,CAAC;QAElC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAChD,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC/C,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC/C,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAChD,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACtD,CAAC;IAEM,8BAAe,GAAtB;QAAA,iBAOC;QANC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,KAAK;YAC/C,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;YACjC,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,KAAK,yCAAyC,CAAC,CAAC;YACzE,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC;YACtC,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,KAAK,UAAU,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,6CAA8B,GAArC;QAAA,iBAUC;QATC,IAAI,OAAO,GAAG,gCAAgC,CAAC;QAC/C,IAAI,SAAS,GAAG,OAAO,CAAC;QACxB,IAAI,YAAY,GAAG,cAAc,CAAC;QAClC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,YAAY,CAAC,CAAC,IAAI,CAAC,UAAC,KAAK;YACjF,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC;YACjC,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,KAAK,OAAO,CAAC,CAAC;YACvC,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC;YAC3C,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,YAAY,KAAK,YAAY,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,+BAAgB,GAAvB;QAAA,iBAMC;QALC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,aAAa;YACvD,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,YAAY,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,UAAC,KAAK;gBAC5D,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,KAAK,aAAa,CAAC,EAAE,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,sCAAuB,GAA9B;QACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IACrE,CAAC;IAEM,4BAAa,GAApB;QAAA,iBAQC;QAPC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,aAAa;YACvD,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,UAAC,MAAM;gBAC1C,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC;gBACjC,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,aAAa,CAAC,EAAE,CAAC,CAAC;gBAC/C,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,aAAa,CAAC,IAAI,CAAC,CAAC;YACrD,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,kCAAmB,GAA1B;QAAA,iBAgBC;QAfC,IAAI,MAAM,CAAC;QACX,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,UAAC,cAAc;YAC5C,MAAM,GAAG,cAAc,CAAC;YACxB,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;YACb,KAAI,CAAC,MAAM,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC;YAC7B,MAAM,CAAC,CAAC,CAAC,UAAU,CAAC;gBAClB,KAAI,CAAC,YAAY,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC;gBAC7C,KAAI,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;aAC3C,CAAC,CAAC;QACL,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,OAAO;YACd,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM;gBACrB,KAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,KAAK,WAAW,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,yCAA0B,GAAjC;QACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IACxE,CAAC;IAEO,0BAAW,GAAnB;QAAA,iBAWC;QAVC,IAAI,KAAK,EAAE,IAAI,CAAC;QAChB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,aAAa;YACvD,KAAK,GAAG,aAAa,CAAC;YACtB,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,UAAU,CAAC,kBAAkB,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;QAC5E,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,YAAY;YACnB,IAAI,GAAG,YAAY,CAAC;YACpB,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,UAAU,CAAC,oBAAoB,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;YACX,MAAM,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC;IACH,WAAC;AAAD,CA/FA,AA+FC,CA/FkB,kBAAQ,GA+F1B;AAED,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;AACnB;kBAAe,IAAI,CAAC","file":"group/Service.test.js","sourcesContent":["import BaseTest from '../BaseTest';\nimport Factory from './TestFactory';\nimport UserFactory from '../user/server/TestFactory';\nimport LinkFactory from '../link/server/TestFactory';\nimport * as q from 'q';\n\nvar NAME = 'Example'\nclass Test extends BaseTest {\n  protected name: string = __filename;\n  protected service;\n  protected user_service;\n  protected link_service;\n\n  public beforeEach() {\n    this.service = Factory();\n    this.user_service = UserFactory();\n    this.link_service = LinkFactory();\n\n    this.user_service.setGroupService(this.service);\n    this.service.setUserService(this.user_service);\n    this.service.setLinkService(this.link_service);\n    this.link_service.setGroupService(this.service);\n    this.link_service.setUserService(this.user_service);\n  }\n\n  public testCreateGroup() {\n    return this.service.createGroup(NAME).then((group) => {\n      this.assert(group.name === NAME);\n      this.assert(group.verb_id === 'http://adlnet.gov/expapi/verbs/launched');\n      this.assert(group.verb_lang === 'en');\n      this.assert(group.verb_display === 'launched');\n    });\n  }\n\n  public testCreateGroupWithVerbOptions() {\n    var VERB_ID = 'http://www.example.com/verb_id';\n    var VERB_LANG = 'en-GB';\n    var VERB_DISPLAY = 'verb_display';\n    return this.service.createGroup(NAME, VERB_ID, VERB_LANG, VERB_DISPLAY).then((group) => {\n      this.assert(group.name === NAME);\n      this.assert(group.verb_id === VERB_ID);\n      this.assert(group.verb_lang === VERB_LANG);\n      this.assert(group.verb_display === VERB_DISPLAY);\n    });\n  }\n\n  public testGetGroupById() {\n    return this.service.createGroup(NAME).then((created_group) => {\n      return this.service.getGroupById(created_group.id).then((group) => {\n        this.assert(group.id === created_group.id);\n      });\n    });\n  }\n\n  public testGetGroupByInvalidId() {\n    return this.service.getGroupById(1).then(this.fail(), this.pass());\n  }\n\n  public testGetGroups() {\n    return this.service.createGroup(NAME).then((created_group) => {\n      return this.service.getGroups().then((groups) => {\n        this.assert(groups.length === 1);\n        this.assert(groups[0].id === created_group.id);\n        this.assert(groups[0].name === created_group.name);\n      });\n    });\n  }\n\n  public testDeleteGroupById() {\n    var models;\n    return this.createGroup().then((created_models) => {\n      models = created_models;\n      return this.service.deleteGroupById(models.group.id);\n    }).then((result) => {\n      this.assert(result === true);\n      return q.allSettled([\n        this.user_service.getUserById(models.user.id),\n        this.service.getGroupById(models.group.id)\n      ]);\n    }).then((results) => {\n      results.forEach((result) => {\n        this.assert(result.state !== 'fulfilled');\n      });\n    });\n  }\n\n  public testDeleteGroupByInvalidId() {\n    return this.service.deleteGroupById(1).then(this.fail(), this.pass());\n  }\n\n  private createGroup() {\n    var group, user;\n    return this.service.createGroup(NAME).then((created_group) => {\n      group = created_group;\n      return this.user_service.createUser('test@example.com', 'pass', group.id);\n    }).then((created_user) => {\n      user = created_user;\n      return this.link_service.createLink('http://example.com', user.id);\n    }).then((link) => {\n      return { group: group, user: user, link: link };\n    });\n  }\n}\n\n(new Test()).run();\nexport default Test;"],"sourceRoot":"/source/"}