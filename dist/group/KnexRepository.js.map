{"version":3,"sources":["group/KnexRepository.ts"],"names":[],"mappings":";;;;;;AAAA,mCAA2B,uBAAuB,CAAC,CAAA;AAEnD;IAAyB,8BAAc;IAAvC;QAAyB,8BAAc;IAqCvC,CAAC;IAnCQ,gCAAW,GAAlB,UAAmB,KAAK;QACtB,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,GAAG;YAC1D,MAAM,CAAC;gBACL,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;gBACV,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,OAAO,EAAE,KAAK,CAAC,OAAO;gBACtB,SAAS,EAAE,KAAK,CAAC,SAAS;gBAC1B,YAAY,EAAE,KAAK,CAAC,YAAY;aACjC,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,iCAAY,GAAnB,UAAoB,EAAE;QACpB,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,UAAU,KAAK;YAChE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,MAAM,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC;YAC9B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,KAAK,CAAC;YACf,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,8BAAS,GAAhB;QACE,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,CAAC;IACjC,CAAC;IAEM,oCAAe,GAAtB,UAAuB,EAAE;QACvB,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,UAAU,KAAK;YACjE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,MAAM,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC;YAC9B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,IAAI,CAAC;YACd,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACH,iBAAC;AAAD,CArCA,AAqCC,CArCwB,4BAAc,GAqCtC;AAED;kBAAe,UAAU,CAAC","file":"group/KnexRepository.js","sourcesContent":["import BaseRepository from '../BaseKnexRepository';\n\nclass Repository extends BaseRepository {\n\n  public createGroup(group) {\n    return this.connect().insert(group, 'id').then(function (ids) {\n      return {\n        id: ids[0],\n        name: group.name,\n        verb_id: group.verb_id,\n        verb_lang: group.verb_lang,\n        verb_display: group.verb_display\n      };\n    });\n  }\n\n  public getGroupById(id) {\n    return this.connect().where('id', id).first().then(function (group) {\n      if (!group) {\n        throw new Error('No group');\n      } else {\n        return group;\n      }\n    });\n  }\n\n  public getGroups() {\n    return this.connect().select();\n  }\n\n  public deleteGroupById(id) {\n    return this.connect().where('id', id).delete().then(function (group) {\n      if (!group) {\n        throw new Error('No group');\n      } else {\n        return true;\n      }\n    });\n  }\n}\n\nexport default Repository;\n"],"sourceRoot":"/source/"}