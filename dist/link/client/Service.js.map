{"version":3,"sources":["link/client/Service.ts"],"names":[],"mappings":";;;;;;AAAA,4BAAwB,gBAAgB,CAAC,CAAA;AAEzC;IAAsB,2BAAW;IAM/B,iBAAmB,UAAe;QAChC,kBAAM,UAAU,CAAC,CAAC;IACpB,CAAC;IAQM,4BAAU,GAAjB,UAAkB,QAAgB,EAAE,UAAmB;QACrD,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACnC,QAAQ,GAAG,SAAS,GAAC,QAAQ,CAAC;QAChC,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,IAAI,CAAC;YAClD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;gBAC1B,QAAQ,EAAE,QAAQ;gBAClB,SAAS,EAAE,UAAU;aACtB,CAAC,CAAC;QACL,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI;YAC/B,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,MAAM,CAAC,IAAI,CAAC;QACd,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAChB,CAAC;IAMM,0BAAQ,GAAf;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;IAC9B,CAAC;IAOM,gCAAc,GAArB,UAAsB,EAAE;QACtB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC;YACvC,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,MAAM,CAAC,IAAI,CAAC;QACd,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IAChB,CAAC;IAQM,+BAAa,GAApB,UAAqB,EAAU,EAAE,QAAgB;QAAjD,iBAOC;QANC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;YACtC,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;QAC/C,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM;YACb,KAAI,CAAC,UAAU,EAAE,CAAC;YAClB,MAAM,CAAC,MAAM,CAAC;QAChB,CAAC,CAAC,CAAC;IACL,CAAC;IACH,cAAC;AAAD,CAlEA,AAkEC,CAlEqB,qBAAW,GAkEhC;AAED;kBAAe,OAAO,CAAC","file":"link/client/Service.js","sourcesContent":["import BaseService from '../BaseService';\n\nclass Service extends BaseService {\n\n  /**\n   * Constructs a new Service.\n   * @param {any} repository A repository.\n   */\n  public constructor(repository: any) {\n    super(repository);\n  }\n\n  /**\n   * Creates a new link.\n   * @param {string} long_url The long_url to be used.\n   * @param {string} custom_url The custom_url to be used (optional).\n   * @return {Future}\n   */\n  public createLink(long_url: string, custom_url?: string) {\n    if (long_url.indexOf('://') === -1) {\n      long_url = 'http://'+long_url;\n    }\n\n    return this.validateLink(long_url, custom_url).then(function () {\n      return this.repo.createLink({\n        long_url: long_url,\n        short_url: custom_url\n      });\n    }.bind(this)).then(function (link) {\n      this.emitChange();\n      return link;\n    }.bind(this));\n  }\n\n  /**\n   * Gets links.\n   * @return {Future}\n   */\n  public getLinks() {\n    return this.repo.getLinks();\n  }\n\n  /**\n   * Gets links.\n   * @param {string} id The id of the link to delete.\n   * @return {Future}\n   */\n  public deleteLinkById(id) {\n    return this.repo.deleteLinkById(id).then(function () {\n      this.emitChange();\n      return true;\n    }.bind(this));\n  }\n\n  /**\n   * Changes the long_url of a link.\n   * @param {number} id Identifer associated with the link.\n   * @param {string} long_url The new long_url.\n   * @return {Promise}\n   */\n  public changeLongUrl(id: number, long_url: string) {\n    return this.validateLink(long_url).then(() => {\n      return this.repo.changeLongUrl(id, long_url);\n    }).then((result) => {\n      this.emitChange();\n      return result;\n    });\n  }\n}\n\nexport default Service;"],"sourceRoot":"/source/"}