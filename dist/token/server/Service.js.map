{"version":3,"sources":["token/server/Service.ts"],"names":[],"mappings":";;;;;;AAAA,4BAAwB,gBAAgB,CAAC,CAAA;AAGzC,IAAM,WAAW,GAAG,GAAG,CAAC;AACxB;IAAsB,2BAAW;IAAjC;QAAsB,8BAAW;IA+BjC,CAAC;IA5BQ,gCAAc,GAArB,UAAsB,YAAY;QAChC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAA;IAClC,CAAC;IAEM,6BAAW,GAAlB,UAAmB,KAAa,EAAE,QAAgB;QAAlD,iBAaC;QAZC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,yBAAyB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAC,IAAI;YAC5E,IAAI,MAAM,GAAG,IAAI,IAAI,EAAE,CAAC;YACxB,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,EAAE,GAAG,WAAW,CAAC,CAAC;YAErD,MAAM,CAAC,KAAI,CAAC,IAAI,CAAC,WAAW,CAAC;gBAC3B,KAAK,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC3C,OAAO,EAAE,IAAI,CAAC,EAAE;gBAChB,MAAM,EAAE,MAAM,CAAC,WAAW,EAAE;aAC7B,CAAC,CAAC;QACL,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,KAAK;YACZ,MAAM,CAAC,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,gCAAc,GAArB,UAAsB,WAAmB;QACvC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,UAAC,KAAK;YACvD,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC9C,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC;YACvB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;YACxD,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACH,cAAC;AAAD,CA/BA,AA+BC,CA/BqB,qBAAW,GA+BhC;AAED;kBAAe,OAAO,CAAC","file":"token/server/Service.js","sourcesContent":["import BaseService from '../BaseService';\nimport * as q from 'q';\n\nconst EXPIRY_TIME = 120; // Minutes.\nclass Service extends BaseService {\n  private user_service;\n\n  public setUserService(user_service) {\n    this.user_service = user_service\n  }\n\n  public createToken(email: string, password: string) {\n    return this.user_service.getUserByEmailAndPassword(email, password).then((user) => {\n      let expiry = new Date();\n      expiry.setMinutes(expiry.getMinutes() + EXPIRY_TIME);\n\n      return this.repo.createToken({\n        value: Math.random().toString(36).substr(2),\n        user_id: user.id,\n        expiry: expiry.toISOString()\n      });\n    }).then((token) => {\n      return token;\n    });\n  }\n\n  public getUserByValue(token_value: string) {\n    return this.repo.getTokenByValue(token_value).then((token) => {\n      if ((new Date()).toISOString() < token.expiry) {\n        return token.user_id;\n      } else {\n        throw new Error('No token. Log out and log back in.');\n      }\n    });\n  }\n}\n\nexport default Service;"],"sourceRoot":"/source/"}