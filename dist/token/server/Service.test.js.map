{"version":3,"sources":["token/server/Service.test.ts"],"names":[],"mappings":";;;;;;AAAA,yBAAqB,aAAa,CAAC,CAAA;AACnC,4BAAoB,eAAe,CAAC,CAAA;AACpC,4BAAwB,+BAA+B,CAAC,CAAA;AACxD,4BAAyB,yBAAyB,CAAC,CAAA;AAEnD,IAAI,KAAK,GAAG,kBAAkB,CAAC;AAC/B,IAAI,QAAQ,GAAG,UAAU,CAAC;AAC1B,IAAI,UAAU,GAAG,YAAY,CAAC;AAC9B;IAAmB,wBAAQ;IAA3B;QAAmB,8BAAQ;QACf,SAAI,GAAW,UAAU,CAAC;IA0CtC,CAAC;IArCQ,yBAAU,GAAjB;QAEE,IAAI,CAAC,aAAa,GAAG,qBAAY,EAAE,CAAC;QACpC,IAAI,CAAC,OAAO,GAAG,qBAAO,EAAE,CAAC;QACzB,IAAI,CAAC,YAAY,GAAG,qBAAW,EAAE,CAAC;QAGlC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QACtD,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACjD,CAAC;IAEM,8BAAe,GAAtB;QAAA,iBASC;QARC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAC,KAAU;YAChE,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,IAAS;YAChB,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAC,KAAK;gBAC1D,KAAI,CAAC,MAAM,CAAC,OAAO,KAAK,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC;gBAC7C,KAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,KAAK,IAAI,CAAC,EAAE,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,6CAA8B,GAArC;QACE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IAClF,CAAC;IAEM,iCAAkB,GAAzB;QAAA,iBAUC;QATC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAC,KAAU;YAChE,MAAM,CAAC,KAAI,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,IAAS;YAChB,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,UAAC,KAAK;gBAC1D,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAC,OAAO;oBAC3D,KAAI,CAAC,MAAM,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO,CAAC,CAAC;gBACzC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IACH,WAAC;AAAD,CA3CA,AA2CC,CA3CkB,kBAAQ,GA2C1B;AAED,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;AACnB;kBAAe,IAAI,CAAC","file":"token/server/Service.test.js","sourcesContent":["import BaseTest from '../BaseTest';\nimport Factory from './TestFactory';\nimport UserFactory from '../../user/server/TestFactory';\nimport GroupFactory from '../../group/TestFactory';\n\nvar EMAIL = 'test@example.com';\nvar PASSWORD = 'password';\nvar GROUP_NAME = 'Test group';\nclass Test extends BaseTest {\n  protected name: string = __filename;\n  protected service;\n  protected group_service;\n  protected user_service;\n\n  public beforeEach() {\n    // Initialises services.\n    this.group_service = GroupFactory();\n    this.service = Factory();\n    this.user_service = UserFactory();\n\n    // Injects services into services.\n    this.user_service.setGroupService(this.group_service);\n    this.service.setUserService(this.user_service);\n  }\n\n  public testCreateToken() {\n    return this.group_service.createGroup(GROUP_NAME).then((group: any) => {\n      return this.user_service.createUser(EMAIL, PASSWORD, group.id);\n    }).then((user: any) => {\n      return this.service.createToken(EMAIL, PASSWORD).then((token) => {\n        this.assert(typeof token.value === 'string');\n        this.assert(token.user_id === user.id);\n      });\n    });\n  }\n\n  public testCreateTokenWithInvalidUser() {\n    return this.service.createToken(EMAIL, PASSWORD).then(this.fail(), this.pass());\n  }\n\n  public testGetUserByValue() {\n    return this.group_service.createGroup(GROUP_NAME).then((group: any) => {\n      return this.user_service.createUser(EMAIL, PASSWORD, group.id);\n    }).then((user: any) => {\n      return this.service.createToken(EMAIL, PASSWORD).then((token) => {\n        return this.service.getUserByValue(token.value).then((user_id) => {\n          this.assert(user_id === token.user_id);\n        });\n      });\n    });\n  }\n}\n\n(new Test()).run();\nexport default Test;"],"sourceRoot":"/source/"}